/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.cafe.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.JButton;
import poly.cafe.dao.BillDAO;
import poly.cafe.dao.CardDAO;
import poly.cafe.entity.Bill;
import poly.cafe.entity.Card;
import poly.cafe.impl.BillDAOImpl;
import poly.cafe.impl.CardDAOImpl;

/**
 *
 * @author Admin
 */
public class SalesJDialog extends javax.swing.JDialog implements SalesController {

    /**
     * Creates new form SalesJDialog
     */
    public SalesJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCard = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlCard.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlCard, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 432, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlCard, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 360, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SalesJDialog dialog = new SalesJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.loadCards(); // tải và hiển thị các thẻ lên cửa sổ bán hàng
    }

    @Override
    public void showBillJDialog(int cardId) {
        // Hiển thị cửa số phiếu bán hàng của thẻ 
        BillDAO dao = new BillDAOImpl();
        Bill bill = dao.findServicingByCardId(cardId); // tải bill đang phục vụ của thẻ servicing -> chưa validate phần này
        BillJDialog dialog = new BillJDialog((Frame) this.getOwner(), true);
        dialog.setBill(bill); // Cần khai báo vào BillJDialog @Setter Bill bill 
        dialog.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlCard;
    // End of variables declaration//GEN-END:variables

  private void loadCards() {
    CardDAO dao = new CardDAOImpl();
    List<Card> cards = dao.findAll();
    pnlCard.removeAll();
    for (Card card : cards) {
        pnlCard.add(this.createButton(card));
    }
    pnlCard.revalidate(); 
    pnlCard.repaint();
}

private JButton createButton(Card card) {
    JButton btnCard = new JButton();
    btnCard.setText(String.format("Card #%d", card.getId()));
    btnCard.setPreferredSize(new Dimension(0, 80));
    
    // Giả sử status == 1 là "đang hoạt động", được phép thao tác
    boolean isAvailable = card.getStatus() == 1;
    btnCard.setEnabled(isAvailable);
    btnCard.setBackground(isAvailable ? Color.GREEN : Color.GRAY);
    btnCard.setActionCommand(String.valueOf(card.getId()));
    
    btnCard.addActionListener((ActionEvent e) -> {
        int cardId = Integer.parseInt(e.getActionCommand());
        SalesJDialog.this.showBillJDialog(cardId);
    });

    return btnCard;
}

}
